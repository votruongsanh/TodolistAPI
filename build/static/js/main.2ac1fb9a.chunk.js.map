{"version":3,"sources":["Component/Todolist/bgtodo.png","Component/Todolist/TodolistRCC.js","redux/constants/TodolistConst.js","redux/actions/TodolistAction.js","assets/img/loading.gif","Component/Loading/Loading.js","Component/DateTime/DateTime.js","Component/Todolist/TodolistRedux.js","App.js","reportWebVitals.js","redux/reducers/TodolistReducer.js","redux/configStore.js","index.js"],"names":["Component","GET_TASK_API","SHOW_LOADING","HIDE_LOADING","getTaskListApi","dispatch","a","showLoading","axios","url","method","data","status","type","taskList","hideLoading","console","log","response","Loading","useSelector","state","TodolistReducer","loading","className","src","imLoadinng","alt","DateTime","useState","curTime","setState","useEffect","setInterval","Date","toLocaleString","style","color","TodolistRedux","props","useDispatch","errors","taskName","values","delTask","taskname","promise","then","rs","catch","err","checkTask","rejectTask","addtask","e","preventDefault","alert","onSubmit","bgtodo","name","id","value","onChange","target","newValues","newErrors","test","trim","placeholder","onClick","display","filter","item","map","index","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReduccer","combineReducers","action","store","createStore","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ac1fb9a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bgtodo.dfa77826.png\";","import React, { Component } from 'react';\r\nimport './todolist.css';\r\nimport bgtodo from './bgtodo.png';\r\nimport axios from 'axios';\r\n\r\nexport default class TodolistRCC extends Component {\r\n\r\n    state = {\r\n        taskList: [],\r\n        values: {\r\n            taskName: '',\r\n        },\r\n        errors: {\r\n            taskName: '',\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getTaskList();\r\n    }\r\n    getTaskList = () => {\r\n        let promise = axios({\r\n            url: 'http://svcy.myclass.vn/api/ToDoList/GetAllTask',\r\n            method: 'GET'\r\n        })\r\n        promise.then((result) => {\r\n            this.setState({\r\n                ...this.state,\r\n                taskList: result.data\r\n            })\r\n        })\r\n        promise.catch((err) => {\r\n            console.log(err.response.data);\r\n        })\r\n    }\r\n    rendertaskTodo = () => {\r\n        return this.state.taskList.filter(item => !item.status).map((item, index) => {\r\n            return <li key={index}>\r\n                <span>{item.taskName}</span>\r\n                <div className=\"buttons\">\r\n                    <button className=\"remove\" type=\"button\" onClick={() => {\r\n                        this.delTask(item.taskName)\r\n                    }} >\r\n                        <i className=\"fa fa-trash-alt\" />\r\n                    </button>\r\n                    <button className=\"complete\" type=\"button\" onClick={() => {\r\n                        this.checkTask(item.taskName)\r\n                    }} >\r\n                        <i className=\"far fa-check-circle\" />\r\n                        <i className=\"fas fa-check-circle\" />\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        })\r\n    }\r\n    rendertaskComplete = () => {\r\n        return this.state.taskList.filter(item => item.status).map((item, index) => {\r\n            return <li key={index}>\r\n                <span>{item.taskName}</span>\r\n                <div className=\"buttons\">\r\n                    <button className=\"remove\" type=\"button\" onClick={() => {\r\n                        this.delTask(item.taskName)\r\n                    }} >\r\n                        <i className=\"fa fa-trash-alt\" />\r\n                    </button>\r\n                    <button className=\"complete\" type=\"button\" onClick={() => {\r\n                        this.rejectTask(item.taskName)\r\n                    }} >\r\n                        <i className=\"far fa-undo\" />\r\n                        <i className=\"fas fa-undo\" />\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let { value, name } = e.target;\r\n        let newValue = { ...this.state.values };\r\n        newValue = { ...newValue, [name]: value };\r\n\r\n        let newError = { ...this.state.errors };\r\n        let regexTaskName = /^[a-z A-Z]+$/;\r\n        if (!regexTaskName.test(value) || value.trim() === '') {\r\n            newError[name] = name + 'invalid';\r\n        } else {\r\n            newError[name] = '';\r\n        }\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            values: newValue,\r\n            errors: newError\r\n        })\r\n    }\r\n    addTask = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.values === \"\") {\r\n            alert(\"vui lòng nhập task\");\r\n            return;\r\n        } else {\r\n            let promise = axios({\r\n                url: 'http://svcy.myclass.vn/api/ToDoList/AddTask',\r\n                method: 'POST',\r\n                data: { taskName: this.state.values.taskName }\r\n            });\r\n            promise.then(rs => {\r\n                alert('addTask success !');\r\n                this.getTaskList()\r\n            })\r\n            promise.catch(err => {\r\n                alert(err.response.data);\r\n            })\r\n        }\r\n\r\n    }\r\n    delTask = (taskname) => {\r\n        let promise = axios({\r\n            url: `http://svcy.myclass.vn/api/ToDoList/deleteTask?taskName=${taskname}`,\r\n            method: 'DELETE'\r\n        });\r\n        promise.then(rs => {\r\n            alert(rs.data);\r\n            this.getTaskList();\r\n        })\r\n        promise.catch(err => {\r\n            alert(err.response.data);\r\n        })\r\n    }\r\n    checkTask = (taskname) => {\r\n        let promise = axios({\r\n            url: `http://svcy.myclass.vn/api/ToDoList/doneTask?taskName=${taskname}`,\r\n            method: 'PUT'\r\n        });\r\n        promise.then(rs => {\r\n            alert(rs.data);\r\n            this.getTaskList();\r\n        })\r\n        promise.catch(err => {\r\n            alert(err.response.data);\r\n        })\r\n    }\r\n    rejectTask = (taskname) => {\r\n        let promise = axios({\r\n            url: `http://svcy.myclass.vn/api/ToDoList/rejectTask?taskName=${taskname}`,\r\n            method: 'PUT'\r\n        });\r\n        promise.then(rs => {\r\n            alert(rs.data);\r\n            this.getTaskList();\r\n        })\r\n        promise.catch(err => {\r\n            alert(err.response.data);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"card\" >\r\n                <div className=\"card__header\">\r\n                    <img src={bgtodo} alt=\"todolist\" />\r\n                </div>\r\n                {/* <h2>hello!</h2> */}\r\n                <form onSubmit={this.addTask}>\r\n                    <div className=\"card__body\" >\r\n                        <div className=\"card__content\">\r\n                            <div className=\"card__title\">\r\n                                <h2>My Tasks</h2>\r\n                                <p>September 9,2020</p>\r\n                            </div>\r\n                            <div className=\"card__add\">\r\n                                <input name=\"taskName\" id=\"newTask\" onChange={this.handleChange} type=\"text\" placeholder=\"Enter an activity...\" />\r\n                                <button id=\"addItem\" type=\"submit\" onClick={this.addTask}>\r\n                                    <i className=\"fa fa-plus\" />\r\n                                </button>\r\n                            </div>\r\n                            <p style={{ color: '#f44336' }}>{this.state.errors.taskName}</p>\r\n\r\n                            <div id=\"notiInput\" className=\"alert-danger\" style={{ display: 'none' }} />\r\n                            <div className=\"card__todo\">\r\n                                {/* Uncompleted tasks */}\r\n                                <ul className=\"todo\" id=\"todo\">\r\n                                    {this.rendertaskTodo()}\r\n                                </ul>\r\n                                {/* Completed tasks */}\r\n                                <ul className=\"todo\" id=\"completed\">\r\n                                    {this.rendertaskComplete()}\r\n                                </ul>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n","export const GET_TASK_API = 'GET_TASK_API';\r\nexport const SHOW_LOADING = \"SHOW_LOADING\";\r\nexport const HIDE_LOADING = \"HIDE_LOADING\";","import axios from \"axios\";\r\nimport { GET_TASK_API, HIDE_LOADING, SHOW_LOADING } from \"../constants/TodolistConst\";\r\n\r\nexport const getTaskListApi = () => {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(showLoading())\r\n            let { data, status } = await axios({\r\n                url: 'http://svcy.myclass.vn/api/ToDoList/GetAllTask',\r\n                method: 'GET'\r\n            });\r\n            if (status === 200) {\r\n                dispatch({\r\n                    type: GET_TASK_API,\r\n                    taskList: data\r\n                })\r\n                dispatch(hideLoading());\r\n            }\r\n        } catch (err) {\r\n            console.log(err.response.data);\r\n            dispatch(hideLoading());\r\n        }\r\n    }\r\n}\r\nexport const addTaskApi = (taskName) => {\r\n    return dispatch => {\r\n        dispatch(showLoading());\r\n        return axios({\r\n            url: 'http://svcy.myclass.vn/api/ToDoList/AddTask',\r\n            method: 'POST',\r\n            data: { taskName: taskName }\r\n        })\r\n        .then(rs => {\r\n            dispatch(getTaskListApi());\r\n            dispatch(hideLoading());\r\n        })\r\n        .catch(err => {\r\n            alert(err.response.data);\r\n            dispatch(hideLoading());\r\n        })\r\n    }\r\n}\r\nexport const delTaskApi = (taskName) => {\r\n    return dispatch => {\r\n        dispatch(showLoading())\r\n        let promise = axios({\r\n            url: `http://svcy.myclass.vn/api/ToDoList/deleteTask?taskName=${taskName}`,\r\n            method: 'DELETE'\r\n        });\r\n        promise.then(rs => {\r\n            // alert(rs.data);\r\n            dispatch(getTaskListApi());\r\n            dispatch(hideLoading());\r\n        })\r\n        promise.catch(err => {\r\n            console.log(err.response.data);\r\n            dispatch(hideLoading());\r\n        })\r\n    }\r\n}\r\nexport const checkTaskApi = (taskName) => {\r\n    return dispatch => {\r\n        dispatch(showLoading())\r\n        let promise = axios({\r\n            url: `http://svcy.myclass.vn/api/ToDoList/doneTask?taskName=${taskName}`,\r\n            method: 'PUT'\r\n        });\r\n        promise.then(rs => {\r\n            // alert(rs.data);\r\n            dispatch(getTaskListApi());\r\n            dispatch(hideLoading());\r\n        })\r\n        promise.catch(err => {\r\n            console.log(err.response.data);\r\n            dispatch(hideLoading());\r\n        })\r\n    }\r\n}\r\nexport const rejectTaskAppi = (taskName) => {\r\n    return dispatch => {\r\n        dispatch(showLoading());\r\n        let promise = axios({\r\n            url: `http://svcy.myclass.vn/api/ToDoList/rejectTask?taskName=${taskName}`,\r\n            method: 'PUT'\r\n        });\r\n        promise.then(rs => {\r\n            // alert(rs.data);\r\n            dispatch(getTaskListApi());\r\n            dispatch(hideLoading());\r\n        })\r\n        promise.catch(err => {\r\n            console.log(err.response.data);\r\n            dispatch(hideLoading());\r\n        })\r\n    }\r\n}\r\nexport const showLoading = () => dispatch => {\r\n    dispatch({ type: SHOW_LOADING });\r\n}\r\nexport const hideLoading = () => dispatch => {\r\n    dispatch({ type: HIDE_LOADING });\r\n}","export default __webpack_public_path__ + \"static/media/loading.6f75c712.gif\";","import React from 'react';\r\nimport imLoadinng from '../../assets/img/loading.gif';\r\nimport '../Todolist/todolist.css';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function Loading() {\r\n    const { loading } = useSelector(state => state.TodolistReducer);\r\n    \r\n    if (!loading) { return null }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <img src={imLoadinng} alt=\"loading\" className=\"imgLoading\" />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nexport default function DateTime() {\r\n    const [state, setState] = useState({\r\n        curTime: null\r\n    })\r\n    useEffect(() => {\r\n        setInterval(() => {\r\n            setState({\r\n                curTime: new Date().toLocaleString()\r\n            })\r\n        }, 1000)\r\n    }, [])\r\n    return (\r\n        <p style={{color:'chocolate'}}>{state.curTime}</p>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport bgtodo from './bgtodo.png';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addTaskApi, checkTaskApi, delTaskApi, getTaskListApi, rejectTaskAppi } from '../../redux/actions/TodolistAction';\r\nimport Loading from '../Loading/Loading';\r\nimport DateTime from '../DateTime/DateTime';\r\n\r\nexport default function TodolistRedux(props) {\r\n    const { taskList } = useSelector(state => state.TodolistReducer);\r\n    const dispatch = useDispatch();\r\n    const [state, setState] = useState({\r\n        errors: {\r\n            taskName: ''\r\n        },\r\n        values: {\r\n            taskName: ''\r\n        },\r\n    });\r\n    const handleChange = (e) => {\r\n        let { name, value } = e.target;\r\n        let newValues = { ...state.values };\r\n        newValues = { ...newValues, [name]: value };\r\n        let newErrors = { ...state.errors };\r\n        let regexString = /^[a-z A-Z]+$/;\r\n        if (!regexString.test(value) || value.trim() === \"\") {\r\n            newErrors[name] = name + \" invalid !\";\r\n        } else {\r\n            newErrors[name] = \"\";\r\n        }\r\n        setState({\r\n            ...state,\r\n            values: newValues,\r\n            errors: newErrors,\r\n        });\r\n    }\r\n    const getTaskList = () => {\r\n        dispatch(getTaskListApi());\r\n    }\r\n    useEffect(() => {\r\n        getTaskList();\r\n    }, []);\r\n    const rendertaskTodo = () => {\r\n        return taskList.filter(item => !item.status).map((item, index) => {\r\n            return <li key={index}>\r\n                <span>{item.taskName}</span>\r\n                <div className=\"buttons\">\r\n                    <button className=\"remove\" type=\"button\" onClick={() => {\r\n                        delTask(item.taskName)\r\n                    }} >\r\n                        <i className=\"fa fa-trash-alt\" />\r\n                    </button>\r\n                    <button className=\"complete\" type=\"button\" onClick={() => {\r\n                        checkTask(item.taskName)\r\n                    }} >\r\n                        <i className=\"far fa-check-circle\" />\r\n                        <i className=\"fas fa-check-circle\" />\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        })\r\n    }\r\n    const rendertaskComplete = () => {\r\n        return taskList.filter(item => item.status).map((item, index) => {\r\n            return <li key={index}>\r\n                <span>{item.taskName}</span>\r\n                <div className=\"buttons\">\r\n                    <button className=\"remove\" type=\"button\" onClick={() => {\r\n                        delTask(item.taskName)\r\n                    }} >\r\n                        <i className=\"fa fa-trash-alt\" />\r\n                    </button>\r\n                    <button className=\"complete\" type=\"button\" onClick={() => {\r\n                        rejectTask(item.taskName)\r\n                    }} >\r\n                        <i className=\"far fa-undo\" />\r\n                        <i className=\"fas fa-undo\" />\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        })\r\n    }\r\n    const delTask = (taskname) => {\r\n        dispatch(delTaskApi(taskname));\r\n    }\r\n    const checkTask = (taskname) => {\r\n        dispatch(checkTaskApi(taskname));\r\n    }\r\n    const rejectTask = (taskname) => {\r\n        dispatch(rejectTaskAppi(taskname));\r\n    }\r\n\r\n    const addtask = (e) => {\r\n        e.preventDefault();\r\n        console.log(state.values.taskName);\r\n        if (state.values.taskName === \"\") {\r\n            alert(\"please type taskName !\");\r\n        } else {\r\n            dispatch(addTaskApi(state.values.taskName));\r\n            state.values.taskName = \"\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={addtask} className=\"card\">\r\n            <div className=\"card__header\">\r\n                <img src={bgtodo} alt=\"todolist\" />\r\n            </div>\r\n            {/* <h2>hello!</h2> */}\r\n            <div className=\"card__body\" >\r\n                <div className=\"card__content\">\r\n                    <div className=\"card__title\">\r\n                        <h2>My Tasks</h2>\r\n                        {/* <p>September 9,2020</p> */}\r\n                        <DateTime />\r\n                    </div>\r\n                    <div className=\"card__add\">\r\n                        <input name=\"taskName\" id=\"newTask\" value={state.values.taskName} onChange={handleChange} type=\"text\" placeholder=\"Enter an activity...\" />\r\n                        <button id=\"addItem\" type=\"submit\" onClick={addtask}><i className=\"fa fa-plus\" /></button>\r\n                    </div>\r\n                    <p style={{ color: '#f44336' }}>{state.errors.taskName}</p>\r\n                    <div id=\"notiInput\" className=\"alert-danger\" style={{ display: 'none' }} />\r\n                    <div className=\"card__todo\">\r\n                        {/* Uncompleted tasks */}\r\n                        <ul className=\"todo\" id=\"todo\">\r\n                            {rendertaskTodo()}\r\n                        </ul>\r\n                        {/* Completed tasks */}\r\n                        <ul className=\"todo\" id=\"completed\" >\r\n                            {rendertaskComplete()}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Loading />\r\n        </form>\r\n    )\r\n}\r\n","\nimport TodolistRCC from './Component/Todolist/TodolistRCC';\nimport TodolistRedux from './Component/Todolist/TodolistRedux';\nimport TodolistRFC from './Component/Todolist/TodolistRFC';\n\n\nfunction App() {\n  return (\n    <div>\n     {/* <TodolistRCC /> */}\n     {/* <TodolistRFC /> */}\n     <TodolistRedux />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { GET_TASK_API, HIDE_LOADING, SHOW_LOADING } from \"../constants/TodolistConst\";\r\n\r\nconst initialState = {\r\n    taskList: [],\r\n    loading: false,\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case GET_TASK_API: {\r\n            state.taskList = action.taskList;\r\n            return { ...state }\r\n        }\r\n        case SHOW_LOADING:{\r\n            return {...state, loading: true}\r\n        }\r\n        case HIDE_LOADING:{\r\n            return {...state, loading: false}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport TodolistReducer from './reducers/TodolistReducer';\r\nimport reduxThunk from 'redux-thunk'\r\n\r\nconst rootReduccer = combineReducers({\r\n    //nơi chứa reducer\r\n    TodolistReducer,\r\n})\r\nconst store = createStore(rootReduccer, applyMiddleware(reduxThunk));\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//import redux\nimport store from './redux/configStore';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}